import my_config as mc
import modules.util as mu

import pandas as pd

class SkModel(object):
    """
    モデルに関する情報を定義する。データの加工、特徴量生成を行う。SkProcオブジェクトから呼び出す
    """
    categ_columns = []
    target_enc_columns = []

    def __init__(self, model_name, version_str, start_date, end_date, test_flag):
        self.model_name = model_name
        self.version_str = version_str
        self.start_date = start_date
        self.end_date = end_date
        self.dict_path = mc.return_base_path(test_flag)
        self.dict_folder = self.dict_path + 'dict/' + self.version_str + '/'
        self._set_columns()

    def _set_columns(self):
        self.categ_columns = ['場コード', '主催者コード', '競走種別コード', 'トラックコード', '混合', '月', 'ナイター', '季節', '非根幹', '距離グループ', '頭数グループ', 'コース', '性別コード', '予想展開', 'クラス変動', '騎手コード', '騎手所属場コード', '見習区分', '騎手名', 'テン乗り', '調教師コード', '調教師所属場コード', '調教師名', '距離増減', '前走トラック種別コード',
                              '所属', '転厩', '馬番グループ', 'JRA施設在厩フラグ', '馬記号コード', '品種コード', '毛色コード', '繁殖登録番号1', '繁殖登録番号3', '繁殖登録番号5', '東西所属コード', '生産者コード', '馬主コード',
                              'トラック種別コード_1', '主催者コード_1', '場コード_1', '競走種別コード_1', '競走条件コード_1', 'トラックコード_1', '頭数_1', '天候コード_1', '馬場状態コード_1', 'ペース_1', '混合_1', '波乱度_1', '月_1', 'ナイター_1', '季節_1', '非根幹_1', '距離グループ_1', '頭数グループ_1', 'コース_1', '逃げ勝ち_1', '内勝ち_1', '外勝ち_1', '短縮勝ち_1', '延長勝ち_1', '人気勝ち_1', 'クラス変動_1', '騎手コード_1', '騎手所属場コード_1', '見習区分_1', 'テン乗り_1', '調教師所属場コード_1', '展開脚質_1', '展開脚色_1', '馬番グループ_1', '勝ち_1', '１番人気_1', '３角先頭_1', '４角先頭_1', '上がり最速_1', '休み明け_1', '連闘_1', '大差負け_1', '凡走_1', '好走_1', '激走_1', '逃げそびれ_1', '同場騎手_1', '同所属場_1', '同所属騎手_1',
                              'トラック種別コード_2', '主催者コード_2', '場コード_2', '競走種別コード_2', '競走条件コード_2', 'トラックコード_2', '頭数_2', '天候コード_2', '馬場状態コード_2', 'ペース_2', '混合_2', '波乱度_2', '月_2', 'ナイター_2', '季節_2', '非根幹_2', '距離グループ_2', '頭数グループ_2', 'コース_2', '逃げ勝ち_2', '内勝ち_2', '外勝ち_2', '短縮勝ち_2', '延長勝ち_2', '人気勝ち_2', 'クラス変動_2', '騎手コード_2', '騎手所属場コード_2', '見習区分_2', 'テン乗り_2', '調教師所属場コード_2', '展開脚質_2', '展開脚色_2', '馬番グループ_2', '勝ち_2', '１番人気_2', '３角先頭_2', '４角先頭_2', '上がり最速_2', '休み明け_2', '連闘_2', '大差負け_2', '凡走_2', '好走_2', '激走_2', '逃げそびれ_2', '同場騎手_2', '同所属場_2', '同所属騎手_2',
                              'トラック種別コード_3', '主催者コード_3', '場コード_3', '競走種別コード_3', '競走条件コード_3', 'トラックコード_3', '頭数_3', '天候コード_3', '馬場状態コード_3', 'ペース_3', '混合_3', '波乱度_3', '月_3', 'ナイター_3', '季節_3', '非根幹_3', '距離グループ_3', '頭数グループ_3', 'コース_3', '逃げ勝ち_3', '内勝ち_3', '外勝ち_3', '短縮勝ち_3', '延長勝ち_3', '人気勝ち_3', 'クラス変動_3', '騎手コード_3', '騎手所属場コード_3', '見習区分_3', 'テン乗り_3', '調教師所属場コード_3', '展開脚質_3', '展開脚色_3', '馬番グループ_3', '勝ち_3', '１番人気_3', '３角先頭_3', '４角先頭_3', '上がり最速_3', '休み明け_3', '連闘_3', '大差負け_3', '凡走_3', '好走_3', '激走_3', '逃げそびれ_3', '同場騎手_3', '同所属場_3', '同所属騎手_3',
                              'トラック種別コード_4', '主催者コード_4', '場コード_4', '競走種別コード_4', '競走条件コード_4', 'トラックコード_4', '頭数_4', '天候コード_4', '馬場状態コード_4', 'ペース_4', '混合_4', '波乱度_4', '月_4', 'ナイター_4', '季節_4', '非根幹_4', '距離グループ_4', '頭数グループ_4', 'コース_4', '逃げ勝ち_4', '内勝ち_4', '外勝ち_4', '短縮勝ち_4', '延長勝ち_4', '人気勝ち_4', 'クラス変動_4', '騎手コード_4', '騎手所属場コード_4', '見習区分_4', 'テン乗り_4', '調教師所属場コード_4', '展開脚質_4', '展開脚色_4', '馬番グループ_4', '勝ち_4', '１番人気_4', '３角先頭_4', '４角先頭_4', '上がり最速_4', '休み明け_4', '連闘_4', '大差負け_4', '凡走_4', '好走_4', '激走_4', '逃げそびれ_4', '同場騎手_4', '同所属場_4', '同所属騎手_4',
                              'トラック種別コード_5', '主催者コード_5', '場コード_5', '競走種別コード_5', '競走条件コード_5', 'トラックコード_5', '頭数_5', '天候コード_5', '馬場状態コード_5', 'ペース_5', '混合_5', '波乱度_5', '月_5', 'ナイター_5', '季節_5', '非根幹_5', '距離グループ_5', '頭数グループ_5', 'コース_5', '逃げ勝ち_5', '内勝ち_5', '外勝ち_5', '短縮勝ち_5', '延長勝ち_5', '人気勝ち_5', 'クラス変動_5', '騎手コード_5', '騎手所属場コード_5', '見習区分_5', 'テン乗り_5', '調教師所属場コード_5', '展開脚質_5', '展開脚色_5', '馬番グループ_5', '勝ち_5', '１番人気_5', '３角先頭_5', '４角先頭_5', '上がり最速_5', '休み明け_5', '連闘_5', '大差負け_5', '凡走_5', '好走_5', '激走_5', '逃げそびれ_5', '同場騎手_5', '同所属場_5', '同所属騎手_5',
                              '継続騎乗', '同騎手_1', '同騎手_2', '同騎手_3', '同騎手_4', '同騎手_5', '同場騎手', '同所属場', '同所属騎手', '同主催者', '同場コード', '同場_1', '同場_2', '同場_3', '同場_4', '同場_5', '同距離グループ_1', '同距離グループ_2', '同距離グループ_3', '同距離グループ_4', '同距離グループ_5', '同季節_1', '同季節_2', '同季節_3', '同季節_4', '同季節_5', '頭数差', '中央経験', '休み明け', '覚醒', '失速', '逃げそびれ凡走', '継続騎乗好走', '末脚安定', '同騎手○', '同騎手◎', '同騎手逃げ', '同場○', '同場◎', '上がり最速数', '逃げ好走', 'ムラっけ', '連闘○', '連闘◎', '同距離○', '同距離◎', '同季節○', '同季節◎', '同場騎手○', '同場騎手◎', '同所属場○', '同所属場◎', '同所属騎手○', '同所属騎手◎', '同根幹', '同距離グループ', '前走凡走', '前走激走', '前走逃げそびれ']

        self.target_enc_columns = ['性別コード', '予想展開','騎手所属場コード', '見習区分', '騎手名', '調教師所属場コード', '調教師名', '所属', '転厩', 'JRA施設在厩フラグ', '馬記号コード', '品種コード', '毛色コード', '繁殖登録番号1', '繁殖登録番号3', '繁殖登録番号5', '東西所属コード', '生産者コード', '馬主コード', '継続騎乗', '同騎手_1', '同騎手_2', '同騎手_3', '同騎手_4', '同騎手_5', '同場騎手', '同所属場', '同所属騎手', '同主催者', '同場コード', '中央経験', '休み明け', '覚醒', '失速', '逃げそびれ凡走', '継続騎乗好走', '末脚安定', '同騎手○', '同騎手◎', '同騎手逃げ', '同場○', '同場◎', '上がり最速数', '逃げ好走', 'ムラっけ', '連闘○', '連闘◎', '同距離○', '同距離◎', '同季節○', '同季節◎', '同場騎手○', '同場騎手◎', '同所属場○', '同所属場◎', '同所属騎手○', '同所属騎手◎', '同根幹', '同距離グループ', '前走凡走', '前走激走', '前走逃げそびれ']

    def get_merge_df(self, race_df, raceuma_df, horse_df, prev_raceuma_df, grouped_raceuma_prev_df):
        base_df = pd.merge(race_df, raceuma_df, on="競走コード")
        base_df = pd.merge(base_df, horse_df, on="血統登録番号")
        base_df = pd.merge(base_df, prev_raceuma_df, on=["競走コード", "馬番"], how='left')
        base_df = pd.merge(base_df, grouped_raceuma_prev_df, on=["競走コード", "馬番"], how='left')
        return base_df


    def get_create_feature_df(self, base_df):
        """ マージしたデータから特徴量を生成する """
        base_df.loc[:, "継続騎乗"] = (base_df["騎手コード"] == base_df["騎手コード_1"]).astype(int)
        base_df.loc[:, "同騎手_1"] = (base_df["騎手コード"] == base_df["騎手コード_1"]).astype(int)
        base_df.loc[:, "同騎手_2"] = (base_df["騎手コード"] == base_df["騎手コード_2"]).astype(int)
        base_df.loc[:, "同騎手_3"] = (base_df["騎手コード"] == base_df["騎手コード_3"]).astype(int)
        base_df.loc[:, "同騎手_4"] = (base_df["騎手コード"] == base_df["騎手コード_4"]).astype(int)
        base_df.loc[:, "同騎手_5"] = (base_df["騎手コード"] == base_df["騎手コード_5"]).astype(int)
        base_df.loc[:, "同場騎手"] = (base_df["騎手所属場コード"] == base_df["場コード"]).astype(int)
        base_df.loc[:, "同所属場"] = (base_df["調教師所属場コード"] == base_df["場コード"]).astype(int)
        base_df.loc[:, "同所属騎手"] = (base_df["騎手所属場コード"] == base_df["調教師所属場コード"]).astype(int)
        base_df.loc[:, "同主催者"] = (base_df["主催者コード"] == base_df["主催者コード_1"]).astype(int)
        base_df.loc[:, "同場コード"] = (base_df["場コード"] == base_df["場コード_1"]).astype(int)
        base_df.loc[:, "同場_1"] = (base_df["場コード"] == base_df["場コード_1"]).astype(int)
        base_df.loc[:, "同場_2"] = (base_df["場コード"] == base_df["場コード_2"]).astype(int)
        base_df.loc[:, "同場_3"] = (base_df["場コード"] == base_df["場コード_3"]).astype(int)
        base_df.loc[:, "同場_4"] = (base_df["場コード"] == base_df["場コード_4"]).astype(int)
        base_df.loc[:, "同場_5"] = (base_df["場コード"] == base_df["場コード_5"]).astype(int)
        base_df.loc[:, "同距離グループ_1"] = (base_df["距離グループ"] == base_df["距離グループ_1"]).astype(int)
        base_df.loc[:, "同距離グループ_2"] = (base_df["距離グループ"] == base_df["距離グループ_2"]).astype(int)
        base_df.loc[:, "同距離グループ_3"] = (base_df["距離グループ"] == base_df["距離グループ_3"]).astype(int)
        base_df.loc[:, "同距離グループ_4"] = (base_df["距離グループ"] == base_df["距離グループ_4"]).astype(int)
        base_df.loc[:, "同距離グループ_5"] = (base_df["距離グループ"] == base_df["距離グループ_5"]).astype(int)
        base_df.loc[:, "同季節_1"] = (base_df["季節"] == base_df["季節_1"]).astype(int)
        base_df.loc[:, "同季節_2"] = (base_df["季節"] == base_df["季節_2"]).astype(int)
        base_df.loc[:, "同季節_3"] = (base_df["季節"] == base_df["季節_3"]).astype(int)
        base_df.loc[:, "同季節_4"] = (base_df["季節"] == base_df["季節_4"]).astype(int)
        base_df.loc[:, "同季節_5"] = (base_df["季節"] == base_df["季節_5"]).astype(int)
        base_df.loc[:, "負担重量_1"] = base_df["負担重量_1"] - base_df["負担重量"]
        base_df.loc[:, "負担重量_2"] = base_df["負担重量_2"] - base_df["負担重量"]
        base_df.loc[:, "負担重量_3"] = base_df["負担重量_3"] - base_df["負担重量"]
        base_df.loc[:, "負担重量_4"] = base_df["負担重量_4"] - base_df["負担重量"]
        base_df.loc[:, "負担重量_5"] = base_df["負担重量_5"] - base_df["負担重量"]
        base_df.loc[:, "頭数差"] = (base_df["頭数グループ"] - base_df["頭数グループ_1"])
        base_df.loc[:, "中央経験"] = base_df.apply(lambda x: 1 if (x["主催者コード_1"] == 1 or x["主催者コード_2"] == 1 or x["主催者コード_3"] == 1 or x["主催者コード_4"] == 1 or x["主催者コード_5"] == 1) else 0, axis=1)
        base_df.loc[:, "休み明け"] = base_df["休養週数"].apply(lambda x: 1 if x >= 20 else 0)
        base_df.loc[:, "覚醒"] = base_df.apply(lambda x: 1 if (x["激走_1"] + x["激走_2"] + x["激走_3"] + x["激走_4"] + x["激走_5"] >= 3) else 0, axis=1)
        base_df.loc[:, "失速"] = base_df.apply(lambda x: 1 if (x["凡走_1"] + x["凡走_2"] + x["凡走_3"] + x["凡走_4"] + x["凡走_5"] >= 3) else 0, axis=1)
        base_df.loc[:, "逃げそびれ凡走"] = base_df.apply(lambda x: 1 if (x["逃げそびれ_1"] * x["凡走_1"] + x["逃げそびれ_2"] * x["凡走_2"] + x["逃げそびれ_3"] * x["凡走_3"] + x["逃げそびれ_4"] * x["凡走_4"] + x["逃げそびれ_5"] * x["凡走_5"] >= 2) else 0, axis=1)
        base_df.loc[:, "継続騎乗好走"] = base_df.apply(lambda x: 1 if x["継続騎乗"] * x["激走_1"] == 1 else 0, axis=1)
        base_df.loc[:, "末脚安定"] = base_df.apply(lambda x: 1 if (x["上がり順位_1"] + x["上がり順位_2"] + x["上がり順位_3"] <= 8 ) else 0, axis=1)
        base_df.loc[:, "同騎手○"] = base_df.apply(lambda x: 1 if (x["同騎手_1"] * x["好走_1"] + x["同騎手_2"] * x["好走_2"] + x["同騎手_3"] * x["好走_3"] + x["同騎手_4"] * x["好走_4"] + x["同騎手_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同騎手◎"] = base_df.apply(lambda x: 1 if (x["同騎手_1"] * x["激走_1"] + x["同騎手_2"] * x["激走_2"] + x["同騎手_3"] * x["激走_3"] + x["同騎手_4"] * x["激走_4"] + x["同騎手_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同騎手逃げ"] = base_df.apply(lambda x: 1 if (x["同騎手_1"] * x["３角先頭_1"] + x["同騎手_2"] * x["３角先頭_2"] + x["同騎手_3"] * x["３角先頭_3"] + x["同騎手_4"] * x["３角先頭_4"] + x["同騎手_5"] * x["３角先頭_5"]) >= 2 else 0, axis=1)
        base_df.loc[:, "同場○"] = base_df.apply(lambda x: 1 if (x["同場_1"] * x["好走_1"] + x["同場_2"] * x["好走_2"] + x["同場_3"] * x["好走_3"] + x["同場_4"] * x["好走_4"] + x["同場_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同場◎"] = base_df.apply(lambda x: 1 if (x["同場_1"] * x["激走_1"] + x["同場_2"] * x["激走_2"] + x["同場_3"] * x["激走_3"] + x["同場_4"] * x["激走_4"] + x["同場_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "上がり最速数"] = base_df.apply(lambda x: 1 if (x["上がり最速_1"] + x["上がり最速_2"] + x["上がり最速_3"] + x["上がり最速_4"] + x["上がり最速_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "逃げ好走"] = base_df.apply(lambda x: 1 if (x["４角先頭_1"] * x["好走_1"] + x["４角先頭_2"] * x["好走_2"] + x["４角先頭_3"] * x["好走_3"] + x["４角先頭_4"] * x["好走_4"] + x["４角先頭_5"] * x["好走_5"] >= 2) else 0, axis=1)
        base_df.loc[:, "ムラっけ"] = base_df.apply(lambda x: 1 if (x["激走_1"] + x["激走_2"] + x["激走_3"] + x["激走_4"] + x["激走_5"] >= 2) and (x["大差負け_1"] + x["大差負け_2"] + x["大差負け_3"] + x["大差負け_4"] + x["大差負け_5"] >= 2)  else 0, axis=1)
        base_df.loc[:, "連闘○"] = base_df.apply(lambda x: 1 if (x["連闘_1"] * x["好走_1"] + x["連闘_2"] * x["好走_2"] + x["連闘_3"] * x["好走_3"] + x["連闘_4"] * x["好走_4"] + x["連闘_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "連闘◎"] = base_df.apply(lambda x: 1 if (x["連闘_1"] * x["激走_1"] + x["連闘_2"] * x["激走_2"] + x["連闘_3"] * x["激走_3"] + x["連闘_4"] * x["激走_4"] + x["連闘_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同距離○"] = base_df.apply(lambda x: 1 if (x["同距離グループ_1"] * x["好走_1"] + x["同距離グループ_2"] * x["好走_2"] + x["同距離グループ_3"] * x["好走_3"] + x["同距離グループ_4"] * x["好走_4"] + x["同距離グループ_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同距離◎"] = base_df.apply(lambda x: 1 if (x["同距離グループ_1"] * x["激走_1"] + x["同距離グループ_2"] * x["激走_2"] + x["同距離グループ_3"] * x["激走_3"] + x["同距離グループ_4"] * x["激走_4"] + x["同距離グループ_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同季節○"] = base_df.apply(lambda x: 1 if (x["同季節_1"] * x["好走_1"] + x["同季節_2"] * x["好走_2"] + x["同季節_3"] * x["好走_3"] + x["同季節_4"] * x["好走_4"] + x["同季節_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同季節◎"] = base_df.apply(lambda x: 1 if (x["同季節_1"] * x["激走_1"] + x["同季節_2"] * x["激走_2"] + x["同季節_3"] * x["激走_3"] + x["同季節_4"] * x["激走_4"] + x["同季節_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同場騎手○"] = base_df.apply(lambda x: 1 if (x["同場騎手_1"] * x["好走_1"] + x["同場騎手_2"] * x["好走_2"] + x["同場騎手_3"] * x["好走_3"] + x["同場騎手_4"] * x["好走_4"] + x["同場騎手_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同場騎手◎"] = base_df.apply(lambda x: 1 if (x["同場騎手_1"] * x["激走_1"] + x["同場騎手_2"] * x["激走_2"] + x["同場騎手_3"] * x["激走_3"] + x["同場騎手_4"] * x["激走_4"] + x["同場騎手_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同所属場○"] = base_df.apply(lambda x: 1 if (x["同所属場_1"] * x["好走_1"] + x["同所属場_2"] * x["好走_2"] + x["同所属場_3"] * x["好走_3"] + x["同所属場_4"] * x["好走_4"] + x["同所属場_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同所属場◎"] = base_df.apply(lambda x: 1 if (x["同所属場_1"] * x["激走_1"] + x["同所属場_2"] * x["激走_2"] + x["同所属場_3"] * x["激走_3"] + x["同所属場_4"] * x["激走_4"] + x["同所属場_5"] * x["激走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同所属騎手○"] = base_df.apply(lambda x: 1 if (x["同所属騎手_1"] * x["好走_1"] + x["同所属騎手_2"] * x["好走_2"] + x["同所属騎手_3"] * x["好走_3"] + x["同所属騎手_4"] * x["好走_4"] + x["同所属騎手_5"] * x["好走_5"]) >= 3 else 0, axis=1)
        base_df.loc[:, "同所属騎手◎"] = base_df.apply(lambda x: 1 if (x["同所属騎手_1"] * x["激走_1"] + x["同所属騎手_2"] * x["激走_2"] + x["同所属騎手_3"] * x["激走_3"] + x["同所属騎手_4"] * x["激走_4"] + x["同所属騎手_5"] * x["激走_5"]) >= 3 else 0, axis=1)

        base_df.loc[:, "同根幹"] = (base_df["非根幹"] == base_df["非根幹_1"]).astype(int)
        base_df.loc[:, "同距離グループ"] = (base_df["距離グループ"] == base_df["距離グループ_1"]).astype(int)
        base_df.loc[:, "前走位置取り変化"] = base_df["コーナー順位4_2"] - base_df["コーナー順位4_1"]
        base_df.loc[:, "休み明け"] = base_df["休養週数"].apply(lambda x: True if x >= 20 else False)
        base_df.loc[:, "前走凡走"] = base_df.apply(lambda x: 1 if (x["単勝人気_1"] < 0.3 and x["確定着順_1"] > 0.3) else 0, axis=1)
        base_df.loc[:, "前走激走"] = base_df.apply(lambda x: 1 if (x["単勝人気_1"] > 0.5 and x["確定着順_1"] < 0.3) else 0, axis=1)
        base_df.loc[:, "前走逃げそびれ"] = base_df.apply(lambda x: 1 if (x["予想展開"] == 1 and x["コーナー順位4_1"] > 0.5) else 0, axis=1)
        base_df.drop(
            ["非根幹_1", "非根幹_2", "主催者コード_1", "主催者コード_2", "場コード_1", "場コード_2", "距離グループ_1", "距離グループ_2"],
            axis=1)
        return base_df


    def get_droped_columns_df(self, base_df):
        base_df.drop(["場名", "発走時刻", "登録頭数", "回次", "日次", "年月日", "馬名", "血統登録番号", "繁殖馬名1", "繁殖馬名3", "繁殖馬名5", "生産者名", "産地名", "馬主名",
                      "近走競走コード1", "近走馬番1", "近走競走コード2", "近走馬番2", "近走競走コード3", "近走馬番3", "近走競走コード4", "近走馬番4", "近走競走コード5", "近走馬番5"], axis=1, inplace=True)
        return base_df

    def get_label_encoding_df(self, base_df):
        categorical_feats = base_df.dtypes[base_df.dtypes == "object"].index.tolist()
        for categ in categorical_feats:
            base_df.loc[:, categ] = mu.label_encoding(base_df[categ], categ, self.dict_folder).astype(str)
        return base_df

    def get_target_variable_df(self, result_df):
        result_df['WIN_FLAG'] = result_df['確定着順'].apply(lambda x: 1 if x == 1 else 0)
        result_df['JIKU_FLAG'] = result_df.apply(lambda x: 1 if x['確定着順'] in (1, 2) and x['馬連払戻金1'] >= 2500 else 0, axis=1)
        result_df['ANA_FLAG'] = result_df.apply(
            lambda x: 1 if x['確定着順'] in (1, 2, 3) and x['複勝配当'] >= 300 else 0, axis=1)
        result_df = result_df[["競走コード", "馬番", "月日", "WIN_FLAG", "JIKU_FLAG", "ANA_FLAG"]].copy()
        return result_df
